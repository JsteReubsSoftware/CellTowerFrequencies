Pseudo Code:
1. For v in V:
    a. Set W to be other celltowers != v (compute distance to neighbours)
    b. Calculate the distance from v to all vertices in W.
    c. If the distance is less than the threshold, add the w to the list of neighbors of v (N = neighbours of v)
    d. If the distance is greater than the threshold, add the w to the list of non-neighbours of v (NN = non-neighbours of v).

    (This should not just add the towers but also their distances to v. This is important for the next step where we need to find the farthest tower from v.)

2. For v in V:
    b. If v.NN is empty (all towers are neighbours since there are no non-neighbours)
        b1. Find any frequencies not used by the neighbours of v and set to f.
        b2. If f is empty (no frequency available)
            b2-1. Find the farthest neighbour and use the same frequency.
            b2-2. Increase count of frequency (the times f has been used)
            b2-2. Go to next v. 
        b3. Else, 
            b3-1. Find least used frequency least_f.
            b3-2. Assign least_f to V
            b3-3. Increase count of frequency (the times f has been used)
            b3-4. Go to next v.

    c. Else if v.NN is not empty (there are some non-neighbouring towers)
        c1. Find tower farthest from v in v.NN (set to farthest_T.f)
        c2. If v first in list of V (index=0)            
            c2-1. Assign the same frequency to v and the farthest tower (select any frequency)
            c2-2. Increase count of frequency (the times f has been used)
            c2-3. Go to next v.
        c3. Else if v is not first in list of V (index>0)
            c3-1. If v.N is empty (no neighbours)
                c3-1-1. Assign the same frequency to v and the farthest tower (select any frequency)
                c3-1-2. Increase count of frequency (the times f has been used)
                c3-1-3. Go to next v.
            c3-2. Else, (there are some neighbours)
                c3-2-1. Set avail_f to all frequencies
                c3-2-2. For n in v.N: (run through neighbours)
                            c3-2-2-1. If n.f in avail_f:
                                c3-2-2-1-1. Remove n.f from avail_f (remove frequency from list of used frequencies)
                c3-2-3. If avail_f is empty (no frequencies available)
                    c3-2-3-1. Find the least used frequency used by v.n
                    c3-2-3-2. Assign least used frequency to v
                    c3-2-3-3. Increase count of frequency (the times f has been used)
                    c3-2-3-4. Go to next v.
                c3-2-4. Else, (there are some frequencies available)
                    c3-2-4-1. If farthest_T.f in avail_f:
                        c3-2-4-1-1. Assign farthest_T.f to v (use the same frequency as the farthest tower)
                        c3-2-4-1-2. Increase count of frequency (the times f has been used)
                        c3-2-4-1-3. Go to next v.
                    c3-2-4-2. Else,
                        c3-2-4-2-1. Find the least used frequency least_f in avail_f
                        c3-2-4-2-2. Assign least_f to v (use the least used frequency)
                        c3-2-4-2-3. Increase count of frequency (the times f has been used)
                        c3-2-4-2-4. Go to next v.


Example of nearby cell tower list and out of range cell tower list:
[
    (towerObj, distance),
    ...
]

formula for distance:
https://community.esri.com/t5/coordinate-reference-systems-blog/distance-on-a-sphere-the-haversine-formula/ba-p/902128#:~:text=These%20function%20names%20have%20a,of%20coordinates%20as%20two%20lists: